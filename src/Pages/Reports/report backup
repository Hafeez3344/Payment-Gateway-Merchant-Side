// import axios from "axios";
// import "jspdf-autotable";
// import jsPDF from "jspdf";
// import Cookies from "js-cookie";
// import { useNavigate } from "react-router-dom";
// import React, { useEffect, useState } from "react";
// import { Button, DatePicker, notification, Select, Space, Table, Modal } from "antd";
// import * as XLSX from "xlsx";

// import { FaDownload } from "react-icons/fa6";

// import BACKEND_URL, { fn_getAllBanksData2 } from "../../api/api";

// const columns = [
//     {
//         title: 'Sr No',
//         dataIndex: 'reportId',
//         key: 'reportId',
//     },
//     {
//         title: 'Creation Date',
//         dataIndex: 'createdAt',
//         key: 'createdAt',
//     },
//     // {
//     //     title: 'Merchant',
//     //     dataIndex: 'merchant',
//     //     key: 'merchant',
//     // },
//     {
//         title: 'Status',
//         dataIndex: 'status',
//         key: 'status',
//     },
//     {
//         title: 'Date Range',
//         dataIndex: 'dateRange',
//         key: 'dateRange',
//     }
// ];

// const Reports = ({ authorization, showSidebar }) => {

//     const navigate = useNavigate();
//     const { RangePicker } = DatePicker;

//     const containerHeight = window.innerHeight - 120;
//     const statusOptions = [
//         { label: "All", value: "" },
//         { label: "Approved", value: "Approved" },
//         { label: "Pending", value: "Pending" },
//         { label: "Decline", value: "Decline" },
//     ];

//     const [toDate, setToDate] = useState("");
//     const [fromDate, setFromDate] = useState("");
//     const [tableData, setTableData] = useState([]);
//     const [selectedBank, setSelectedBank] = useState("");
//     const [selectedStatus, setSelectedStatus] = useState("");
//     const [dateRange, setDateRange] = useState([null, null]);
//     const [disableButton, setDisableButton] = useState(false);
//     const [isModalOpen, setIsModalOpen] = useState(false);
//     const [reportData, setReportData] = useState(null);
//     const selectedMerchantName = localStorage.getItem('userName');

//     useEffect(() => {
//         window.scroll(0, 0);
//         if (!authorization) {
//             navigate("/login");
//         };
//     }, [authorization]);

//     useEffect(() => {
//         fn_getReportsLog();
//     }, []);

//     useEffect(() => {
//         if (dateRange[0] && dateRange[1]) {
//             setFromDate(new Date(dateRange[0]?.$d));
//             setToDate(new Date(dateRange[1]?.$d));
//         }
//     }, [dateRange]);

//     const fn_changeStatus = (value) => {
//         setSelectedStatus(value);
//     };

//     const fn_submit = async () => {
//         try {
//             if (fromDate === "" || toDate === "") {
//                 return notification.error({
//                     message: "Error",
//                     description: "Please Select Date",
//                     placement: "topRight",
//                 });
//             }
//             const token = Cookies.get("merchantToken");
//             const merchantId = Cookies.get("merchantId");
//             setDisableButton(true);
//             const response = await axios.get(`${BACKEND_URL}/ledger/transactionSummary?merchantId=["${merchantId}"]&status=${selectedStatus}&startDate=${fromDate}&endDate=${toDate}&filterByMerchantId=${merchantId}`, {
//                 headers: {
//                     Authorization: `Bearer ${token}`,
//                     "Content-Type": "application/json",
//                 },
//             });
//             if (response?.status) {
//                 if (response?.data?.status === "ok") {
//                     setReportData(response?.data);
//                     setIsModalOpen(true);
//                 }
//             }
//         } catch (error) {
//             console.log("error while download report ", error);
//             setDisableButton(false);
//         }
//     };

//     const handleDownload = (type) => {
//         if (type === 'pdf') {
//             downloadPDF(reportData);
//         } else {
//             downloadExcel(reportData);
//         }
//         fn_getReportsLog();
//         setIsModalOpen(false);
//         setReportData(null);
//         setDisableButton(false);
//     };

//     const handleModalCancel = () => {
//         setIsModalOpen(false);
//         setReportData(null);
//         setDisableButton(false);
//     };

//     const downloadPDF = (data) => {
//         const doc = new jsPDF({
//             orientation: "landscape",
//             unit: "pt",
//             format: "a4"
//         });

//         const tableColumn = ["Date", "Trn Status", "No. of Transactions", "Pay In (INR)", "Charges (INR)", "Amount (INR)"];

//         const tableRows = data?.data?.map((item) => {
//             return [
//                 item.Date || "All",
//                 // selectedMerchantName === "" ? "All" : selectedMerchantName,
//                 (!item.Status || item.Status === "") ? "All" : item.Status,
//                 item.NoOfTransaction || "0",
//                 item.PayIn || "0",
//                 item.Charges || "0",
//                 item.Amount || "0"
//             ];
//         }) || [];

//         tableRows.push(["Total", "", "", "", data.totalPayIn.toFixed(2), data.totalCharges.toFixed(2), data.totalAmount.toFixed(2)]);

//         doc.autoTable({
//             head: [tableColumn],
//             body: tableRows,
//             styles: { fontSize: 10 },
//             theme: "",
//             margin: { top: 30 }
//         });

//         doc.save("report.pdf");
//         setDisableButton(false);
//     };

//     const downloadExcel = (data) => {
//         const tableColumn = ["Date", "Merchant", "Trn Status", "No. of Transactions", "Pay In (INR)", "Charges (INR)", "Amount (INR)"];
//         const tableRows = data?.data?.map((item) => {
//             return {
//                 Date: item.Date || "All",
//                 Merchant: selectedMerchantName === "" ? "All" : selectedMerchantName,
//                 Status: (!item.Status || item.Status === "") ? "All" : item.Status,
//                 "No. of Transactions": item.NoOfTransaction || "0",
//                 "Pay In (INR)": item.PayIn || "0",
//                 "Charges (INR)": item.Charges || "0",
//                 "Amount (INR)": item.Amount || "0"
//             };
//         }) || [];

//         tableRows.push({
//             Date: "Total",
//             Merchant: "",
//             Status: "",
//             "No. of Transactions": "",
//             "Pay In (INR)": data.totalPayIn.toFixed(2),
//             "Charges (INR)": data.totalCharges.toFixed(2),
//             "Amount (INR)": data.totalAmount.toFixed(2)
//         });

//         const worksheet = XLSX.utils.json_to_sheet(tableRows);
//         const workbook = XLSX.utils.book_new();
//         XLSX.utils.book_append_sheet(workbook, worksheet, "Report");

//         XLSX.writeFile(workbook, "report.xlsx");
//         setDisableButton(false);
//     };

//     const fn_getReportsLog = async () => {
//         try {
//             const token = Cookies.get("merchantToken");
//             const merchantId = Cookies.get("merchantId");
//             const response = await axios.get(`${BACKEND_URL}/ledgerLog/getAll?&filterByMerchantId=${merchantId}`, {
//                 headers: {
//                     Authorization: `Bearer ${token}`,
//                     "Content-Type": "application/json",
//                 },
//             });
//             if (response?.status) {
//                 if (response?.data?.status === "ok") {
//                     setTableData(response?.data?.data?.map((item, index) => {
//                         return {
//                             key: `${index + 1}`,
//                             reportId: `${index + 1}`,
//                             createdAt: new Date(item?.createdAt)?.toLocaleDateString(),
//                             merchant: item?.merchantId?.merchantName || "All",
//                             status: item?.status && item?.status !== "" ? item?.status : "All",
//                             dateRange: item?.startDate && item?.endDate ? `${new Date(item?.startDate).toDateString()} - ${new Date(item?.endDate).toDateString()}` : "All"
//                         }
//                     }))
//                 }
//             }
//         } catch (error) {
//             console.log("error in fetching reports log ", error);
//         }
//     };

//     return (
//         <div
//             style={{ minHeight: `${containerHeight}px` }}
//             className={`bg-gray-100 transition-all duration-500 ${showSidebar ? "pl-0 md:pl-[270px]" : "pl-0"}`}
//         >
//             <div className="p-7">
//                 <div className="flex flex-col md:flex-row gap-[12px] items-center justify-between mb-7">
//                     <h1 className="text-[20px] md:text-[25px] font-[500]">
//                         Reports
//                     </h1>
//                     <p
//                         onClick={() => navigate("/SystemConfigurationIntegration")}
//                         className="text-[#7987A1] text-[13px] md:text-[15px] font-[400] cursor-pointer"
//                     >
//                         Dashboard - Reports
//                     </p>
//                 </div>
//                 <div className="grid grid-cols-3 gap-[20px]">
//                     <div className="flex flex-col gap-[2px]">
//                         <p className="text-[13px] font-[500]">Select Status</p>
//                         <Select
//                             style={{ width: '100%', height: "38px" }}
//                             placeholder="Please Select Status"
//                             onChange={fn_changeStatus}
//                             options={statusOptions}
//                         />
//                     </div>
//                     <div className="flex flex-col gap-[2px]">
//                         <p className="text-[13px] font-[500]">Select Date Range</p>
//                         <Space direction="vertical" size={10}>
//                             <RangePicker
//                                 value={dateRange}
//                                 onChange={(dates) => setDateRange(dates)}
//                                 style={{ width: "100%", height: "38px" }}
//                             />
//                         </Space>
//                     </div>
//                 </div>
//                 <div className="flex justify-end mt-[20px]">
//                     <Button type="primary" className="h-[38px] w-[200px]" onClick={fn_submit} disabled={disableButton}><FaDownload /> Download Report</Button>
//                 </div>
//                 <div className="w-full bg-[white] mt-[30px]">
//                     <Table dataSource={tableData} columns={columns} />
//                 </div>
//             </div>
//             <Modal
//                 title="Select Download Format"
//                 open={isModalOpen}
//                 onCancel={handleModalCancel}
//                 footer={null}
//             >
//                 <div className="flex justify-center gap-4 py-4">
//                     <Button type="primary" onClick={() => handleDownload('pdf')} icon={<FaDownload />}>
//                         Download PDF
//                     </Button>
//                     <Button type="primary" onClick={() => handleDownload('excel')} icon={<FaDownload />}>
//                         Download Excel
//                     </Button>
//                 </div>
//             </Modal>
//         </div>
//     );
// };

// export default Reports;









